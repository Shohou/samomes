{"version":3,"sources":["webpack:///../../../src/components/VExpansionPanel/VExpansionPanels.ts","webpack:///../../../src/components/VDialog/VDialog.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelContent.ts","webpack:///../../../src/components/VForm/VForm.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts","webpack:///../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"names":["name","provide","expansionPanels","this","props","accordion","disabled","flat","hover","focusable","inset","popout","readonly","tile","Boolean","computed","classes","created","$attrs","hasOwnProperty","Array","value","length","methods","updateItem","getValue","item","nextValue","index","toggleMethod","baseMixins","directives","ClickOutside","dark","fullscreen","light","maxWidth","type","String","default","noClickAnimation","origin","persistent","retainFocus","scrollable","transition","width","data","activatedBy","animate","animateTimeout","isActive","stackMinZIndex","contentClasses","hasActivator","$slots","$scopedSlots","watch","beforeMount","beforeDestroy","window","unbind","animateClick","closeConditional","target","e","_isDestroyed","$refs","content","contains","overlay","$el","activeZIndex","hideScroll","document","show","bind","onClickOutside","onKeydown","getOpenDependents","activator","onFocusin","getOpenDependentElements","some","el","querySelectorAll","focus","render","children","class","ref","args","include","on","click","style","undefined","dialog","h","showLazyContent","attrs","role","tabindex","getScopeIdAttrs","keydown","zIndex","$createElement","root","staticClass","attach","expansionPanel","setBackgroundColor","inheritAttrs","lazyValidation","inputs","watchers","errorBag","handler","errors","Object","deep","immediate","watchInput","watcher","input","val","_uid","valid","shouldValidate","validate","filter","reset","resetErrorBag","setTimeout","resetValidation","register","unregister","found","find","i","unwatch","novalidate","attrs$","submit","ripple","disableIconRotate","expandIcon","hideActions","hasMousedown","isDisabled","isReadonly","onClick","genIcon","icon","mousedown","mouseup","open","header","nextIsActive","groupClasses","registerContent","unregisterContent","registerHeader","vm","unregisterHeader","toggle","isBooted"],"mappings":"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","file":"js/chunk-eb3b8cfe.0cb2526f.js","sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n","// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VThemeProvider } from '../VThemeProvider'\n\n// Mixins\nimport Activatable from '../../mixins/activatable'\nimport Dependent from '../../mixins/dependent'\nimport Detachable from '../../mixins/detachable'\nimport Overlayable from '../../mixins/overlayable'\nimport Returnable from '../../mixins/returnable'\nimport Stackable from '../../mixins/stackable'\nimport Toggleable from '../../mixins/toggleable'\n\n// Directives\nimport ClickOutside from '../../directives/click-outside'\n\n// Helpers\nimport mixins from '../../util/mixins'\nimport { removed } from '../../util/console'\nimport {\n  convertToUnit,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { VNode } from 'vue'\n\nconst baseMixins = mixins(\n  Activatable,\n  Dependent,\n  Detachable,\n  Overlayable,\n  Returnable,\n  Stackable,\n  Toggleable\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-dialog',\n\n  directives: { ClickOutside },\n\n  props: {\n    dark: Boolean,\n    disabled: Boolean,\n    fullscreen: Boolean,\n    light: Boolean,\n    maxWidth: {\n      type: [String, Number],\n      default: 'none',\n    },\n    noClickAnimation: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    persistent: Boolean,\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    transition: {\n      type: [String, Boolean],\n      default: 'dialog-transition',\n    },\n    width: {\n      type: [String, Number],\n      default: 'auto',\n    },\n  },\n\n  data () {\n    return {\n      activatedBy: null as EventTarget | null,\n      animate: false,\n      animateTimeout: -1,\n      isActive: !!this.value,\n      stackMinZIndex: 200,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        [(`v-dialog ${this.contentClass}`).trim()]: true,\n        'v-dialog--active': this.isActive,\n        'v-dialog--persistent': this.persistent,\n        'v-dialog--fullscreen': this.fullscreen,\n        'v-dialog--scrollable': this.scrollable,\n        'v-dialog--animated': this.animate,\n      }\n    },\n    contentClasses (): object {\n      return {\n        'v-dialog__content': true,\n        'v-dialog__content--active': this.isActive,\n      }\n    },\n    hasActivator (): boolean {\n      return Boolean(\n        !!this.$slots.activator ||\n        !!this.$scopedSlots.activator\n      )\n    },\n  },\n\n  watch: {\n    isActive (val) {\n      if (val) {\n        this.show()\n        this.hideScroll()\n      } else {\n        this.removeOverlay()\n        this.unbind()\n      }\n    },\n    fullscreen (val) {\n      if (!this.isActive) return\n\n      if (val) {\n        this.hideScroll()\n        this.removeOverlay(false)\n      } else {\n        this.showScroll()\n        this.genOverlay()\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('full-width')) {\n      removed('full-width', this)\n    }\n  },\n\n  beforeMount () {\n    this.$nextTick(() => {\n      this.isBooted = this.isActive\n      this.isActive && this.show()\n    })\n  },\n\n  beforeDestroy () {\n    if (typeof window !== 'undefined') this.unbind()\n  },\n\n  methods: {\n    animateClick () {\n      this.animate = false\n      // Needed for when clicking very fast\n      // outside of the dialog\n      this.$nextTick(() => {\n        this.animate = true\n        window.clearTimeout(this.animateTimeout)\n        this.animateTimeout = window.setTimeout(() => (this.animate = false), 150)\n      })\n    },\n    closeConditional (e: Event) {\n      const target = e.target as HTMLElement\n      // Ignore the click if the dialog is closed or destroyed,\n      // if it was on an element inside the content,\n      // if it was dragged onto the overlay (#6969),\n      // or if this isn't the topmost dialog (#9907)\n      return !(\n        this._isDestroyed ||\n        !this.isActive ||\n        this.$refs.content.contains(target) ||\n        (this.overlay && target && !this.overlay.$el.contains(target))\n      ) && this.activeZIndex >= this.getMaxZIndex()\n    },\n    hideScroll () {\n      if (this.fullscreen) {\n        document.documentElement.classList.add('overflow-y-hidden')\n      } else {\n        Overlayable.options.methods.hideScroll.call(this)\n      }\n    },\n    show () {\n      !this.fullscreen && !this.hideOverlay && this.genOverlay()\n      this.$nextTick(() => {\n        this.$refs.content.focus()\n        this.bind()\n      })\n    },\n    bind () {\n      window.addEventListener('focusin', this.onFocusin)\n    },\n    unbind () {\n      window.removeEventListener('focusin', this.onFocusin)\n    },\n    onClickOutside (e: Event) {\n      this.$emit('click:outside', e)\n\n      if (this.persistent) {\n        this.noClickAnimation || this.animateClick()\n      } else {\n        this.isActive = false\n      }\n    },\n    onKeydown (e: KeyboardEvent) {\n      if (e.keyCode === keyCodes.esc && !this.getOpenDependents().length) {\n        if (!this.persistent) {\n          this.isActive = false\n          const activator = this.getActivator()\n          this.$nextTick(() => activator && (activator as HTMLElement).focus())\n        } else if (!this.noClickAnimation) {\n          this.animateClick()\n        }\n      }\n      this.$emit('keydown', e)\n    },\n    // On focus change, wrap focus to stay inside the dialog\n    // https://github.com/vuetifyjs/vuetify/issues/6892\n    onFocusin (e: Event) {\n      if (!e || !this.retainFocus) return\n\n      const target = e.target as HTMLElement\n\n      if (\n        !!target &&\n        // It isn't the document or the dialog body\n        ![document, this.$refs.content].includes(target) &&\n        // It isn't inside the dialog body\n        !this.$refs.content.contains(target) &&\n        // We're the topmost dialog\n        this.activeZIndex >= this.getMaxZIndex() &&\n        // It isn't inside a dependent element (like a menu)\n        !this.getOpenDependentElements().some(el => el.contains(target))\n        // So we must have focused something outside the dialog and its children\n      ) {\n        // Find and focus the first available element inside the dialog\n        const focusable = this.$refs.content.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])')\n        focusable.length && (focusable[0] as HTMLElement).focus()\n      }\n    },\n  },\n\n  render (h): VNode {\n    const children = []\n    const data = {\n      class: this.classes,\n      ref: 'dialog',\n      directives: [\n        {\n          name: 'click-outside',\n          value: this.onClickOutside,\n          args: {\n            closeConditional: this.closeConditional,\n            include: this.getOpenDependentElements,\n          },\n        },\n        { name: 'show', value: this.isActive },\n      ],\n      on: {\n        click: (e: Event) => { e.stopPropagation() },\n      },\n      style: {},\n    }\n\n    if (!this.fullscreen) {\n      data.style = {\n        maxWidth: this.maxWidth === 'none' ? undefined : convertToUnit(this.maxWidth),\n        width: this.width === 'auto' ? undefined : convertToUnit(this.width),\n      }\n    }\n\n    children.push(this.genActivator())\n\n    let dialog = h('div', data, this.showLazyContent(this.getContentSlot()))\n    if (this.transition) {\n      dialog = h('transition', {\n        props: {\n          name: this.transition,\n          origin: this.origin,\n        },\n      }, [dialog])\n    }\n\n    children.push(h('div', {\n      class: this.contentClasses,\n      attrs: {\n        role: 'document',\n        tabindex: this.isActive ? 0 : undefined,\n        ...this.getScopeIdAttrs(),\n      },\n      on: {\n        keydown: this.onKeydown,\n      },\n      style: { zIndex: this.activeZIndex },\n      ref: 'content',\n    }, [\n      this.$createElement(VThemeProvider, {\n        props: {\n          root: true,\n          light: this.light,\n          dark: this.dark,\n        },\n      }, [dialog]),\n    ]))\n\n    return h('div', {\n      staticClass: 'v-dialog__container',\n      class: {\n        'v-dialog__container--attached':\n          this.attach === '' ||\n          this.attach === true ||\n          this.attach === 'attach',\n      },\n      attrs: { role: 'dialog' },\n    }, children)\n  },\n})\n","// Components\nimport VExpansionPanel from './VExpansionPanel'\nimport { VExpandTransition } from '../transitions'\n\n// Mixins\nimport Bootable from '../../mixins/bootable'\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Bootable,\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-content', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-content',\n\n  computed: {\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerContent(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterContent()\n  },\n\n  render (h): VNode {\n    return h(VExpandTransition, [\n      h('div', this.setBackgroundColor(this.color, {\n        staticClass: 'v-expansion-panel-content',\n        directives: [{\n          name: 'show',\n          value: this.isActive,\n        }],\n      }), this.showLazyContent([\n        h('div', { class: 'v-expansion-panel-content__wrap' }, getSlot(this)),\n      ])),\n    ])\n  },\n})\n","// Components\nimport VInput from '../VInput/VInput'\n\n// Mixins\nimport mixins from '../../util/mixins'\nimport BindsAttrs from '../../mixins/binds-attrs'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Helpers\nimport { VNode } from 'vue'\n\ntype ErrorBag = Record<number, boolean>\ntype VInputInstance = InstanceType<typeof VInput>\ntype Watchers = {\n  _uid: number\n  valid: () => void\n  shouldValidate: () => void\n}\n\n/* @vue/component */\nexport default mixins(\n  BindsAttrs,\n  RegistrableProvide('form')\n  /* @vue/component */\n).extend({\n  name: 'v-form',\n\n  inheritAttrs: false,\n\n  props: {\n    lazyValidation: Boolean,\n    value: Boolean,\n  },\n\n  data: () => ({\n    inputs: [] as VInputInstance[],\n    watchers: [] as Watchers[],\n    errorBag: {} as ErrorBag,\n  }),\n\n  watch: {\n    errorBag: {\n      handler (val) {\n        const errors = Object.values(val).includes(true)\n\n        this.$emit('input', !errors)\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n\n  methods: {\n    watchInput (input: any): Watchers {\n      const watcher = (input: any): (() => void) => {\n        return input.$watch('hasError', (val: boolean) => {\n          this.$set(this.errorBag, input._uid, val)\n        }, { immediate: true })\n      }\n\n      const watchers: Watchers = {\n        _uid: input._uid,\n        valid: () => {},\n        shouldValidate: () => {},\n      }\n\n      if (this.lazyValidation) {\n        // Only start watching inputs if we need to\n        watchers.shouldValidate = input.$watch('shouldValidate', (val: boolean) => {\n          if (!val) return\n\n          // Only watch if we're not already doing it\n          if (this.errorBag.hasOwnProperty(input._uid)) return\n\n          watchers.valid = watcher(input)\n        })\n      } else {\n        watchers.valid = watcher(input)\n      }\n\n      return watchers\n    },\n    /** @public */\n    validate (): boolean {\n      return this.inputs.filter(input => !input.validate(true)).length === 0\n    },\n    /** @public */\n    reset (): void {\n      this.inputs.forEach(input => input.reset())\n      this.resetErrorBag()\n    },\n    resetErrorBag () {\n      if (this.lazyValidation) {\n        // Account for timeout in validatable\n        setTimeout(() => {\n          this.errorBag = {}\n        }, 0)\n      }\n    },\n    /** @public */\n    resetValidation () {\n      this.inputs.forEach(input => input.resetValidation())\n      this.resetErrorBag()\n    },\n    register (input: VInputInstance) {\n      this.inputs.push(input)\n      this.watchers.push(this.watchInput(input))\n    },\n    unregister (input: VInputInstance) {\n      const found = this.inputs.find(i => i._uid === input._uid)\n\n      if (!found) return\n\n      const unwatch = this.watchers.find(i => i._uid === found._uid)\n      if (unwatch) {\n        unwatch.valid()\n        unwatch.shouldValidate()\n      }\n\n      this.watchers = this.watchers.filter(i => i._uid !== found._uid)\n      this.inputs = this.inputs.filter(i => i._uid !== found._uid)\n      this.$delete(this.errorBag, found._uid)\n    },\n  },\n\n  render (h): VNode {\n    return h('form', {\n      staticClass: 'v-form',\n      attrs: {\n        novalidate: true,\n        ...this.attrs$,\n      },\n      on: {\n        submit: (e: Event) => this.$emit('submit', e),\n      },\n    }, this.$slots.default)\n  },\n})\n","// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n","// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      /* istanbul ignore else */\n      if (this.content) this.content.isBooted = true\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n"],"sourceRoot":""}